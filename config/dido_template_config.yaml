# DiDo config.yaml example file
ROOT_DIR: {root_dir}
WORK_DIR: {work_dir}

# Example suppliers
SUPPLIERS:
  {supplier}:
    {project_name}:
      # schema description for dido-create
      {data_dict}
      schema_file: {schema_filename}
      prefix: # name of file to markdown description of the project
      suffix: # ditto, but is used after the schema information

SUPPLIERS_TO_PROCESS: [{supplier}]

SERVER_CONFIGS:
  # database credentials for ODL database.
  # POSTGRES_USER and POSTGRES_PASSWORD will be extracted from
  # .pgpass or .env in that order
  # ODL_DATABASE should not be changed unless you know what you are doing
  ODL_SERVER_CONFIG:
    POSTGRES_PORT: 5432
    POSTGRES_DB: techniek
    POSTGRES_SCHEMA: datamanagement

  # database credentials for storing the data.
  # POSTGRES_USER and POSTGRES_PASSWORD will be extracted from
  # .pgpass or .env in that order
  DATA_SERVER_CONFIG:
    POSTGRES_PORT: 5432
    POSTGRES_DB: data
    POSTGRES_SCHEMA: odl

  # database credentials for xtracting the data.
  # POSTGRES_USER and POSTGRES_PASSWORD will be extracted from
  # .pgpass or .env in that order
  # leave as it is until you really need it
  FOREIGN_SERVER_CONFIG:
    POSTGRES_PORT: 5432
    POSTGRES_DB: same_database_as_data_server_config
    POSTGRES_SCHEMA: same_or_other_schema

# select server to use as POSTGRES_HOST: development or production
HOST: datawarehouse_dev

# which columns to write for markdown tables and in which order
COLUMNS:
  - kolomnaam
  - datatype
  - beschrijving
  - leverancier_kolomnaam
  - leverancier_kolomtype
  - code_attribuut_sleutel
  - leverancier_info_1
  - leverancier_info_2
  - code_attribuut
  - code_bronbestand
  - constraints
  - domein
  - verstek
  - positie
  - avg_classificatie
  - veiligheid_classificatie
  - gebruiker_info_1
  - gebruiker_info_2
  - gebruiker_info_3
  - kolom_expiratie_datum
  - attribuut_datum_begin
  - attribuut_datum_einde

{data_types}
